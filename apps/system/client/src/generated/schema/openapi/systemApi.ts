/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/ping": {
    /** Checks if the server is running */
    get: {
      responses: {
        /** @description Ping response */
        200: {
          content: {
            "application/json": {
              /**
               * @description Ping response message
               * @example pong
               */
              message?: string;
            };
          };
        };
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/api/v1/auth/otp": {
    /**
     * Send OTP
     * @description One Time Password (OTP) to user.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** Format: email */
            email: string;
          };
        };
      };
      responses: {
        /** @description OTP has been sent successfully. */
        200: {
          content: {
            "application/json": {
              /** @description OTP 6 digit code */
              code: string;
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/api/v1/auth/otp/verify": {
    /**
     * Verify OTP
     * @description Verify OTP sent by user.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** Format: email */
            email: string;
            otp: string;
          };
        };
      };
      responses: {
        /** @description OTP has been verified successfully. */
        200: {
          content: {
            "application/json": {
              /** @description JWT token */
              token: string;
            };
          };
        };
        400: components["responses"]["BadRequestError"];
        429: components["responses"]["TooManyRequestsError"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/api/v1/auth/oauth": {
    /**
     * Auth by OAuth
     * @description Auth by OAuth.
     */
    post: {
      responses: {
        /** @description SignIn response */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        400: components["responses"]["BadRequestError"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/api/v1/me": {
    /**
     * Get Admin User
     * @description Returns the admin user
     */
    get: {
      responses: {
        /** @description Admin User */
        200: {
          content: {
            "application/json": components["schemas"]["Me"];
          };
        };
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/api/v1/me/update-name": {
    /**
     * Update Name
     * @description Update Name
     */
    post: operations["updateName"];
  };
  "/api/v1/login": {
    /**
     * Login
     * @description Login
     */
    post: operations["login"];
  };
  "/api/v1/workspaces": {
    /**
     * Get Joined Workspaces
     * @description Returns the workspaces the user is a member of
     */
    get: {
      responses: {
        /** @description Joined Workspaces */
        200: {
          content: {
            "application/json": components["schemas"]["Workspaces"];
          };
        };
        500: components["responses"]["InternalServerError"];
      };
    };
    /**
     * Create Workspace
     * @description Creates a new workspace
     */
    post: {
      requestBody: components["requestBodies"]["CreateWorkspace"];
      responses: {
        /** @description Workspace created */
        201: {
          content: {
            "application/json": components["schemas"]["Workspace"];
          };
        };
        400: components["responses"]["BadRequestError"];
        409: components["responses"]["ConflictError"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    User: {
      /** Format: uuid */
      userId: string;
      /** Format: email */
      email: string;
      name?: string;
      phoneNumber?: string;
    };
    MultiFactor: {
      factorId: string;
      phoneNumber: string;
    };
    Workspace: {
      /**
       * @description base32 encoded UUID
       * @example 3VZ6ZJ2Z6VZ6ZJ2Z
       */
      workspaceId: string;
      /** @description workspace name */
      name: string;
      /** @description workspace subdomain (e.x. example-test) */
      subdomain: string;
    };
    Workspaces: components["schemas"]["Workspace"][];
    Member: {
      profile: components["schemas"]["MemberProfile"];
      user: components["schemas"]["User"];
    };
    MemberProfile: {
      /**
       * @description base32 encoded UUID
       * @example 3VZ6ZJ2Z6VZ6ZJ2Z
       */
      id: string;
      displayName: string;
      idNumber?: string;
    };
    MembershipPeriod: {
      /** Format: date-time */
      start: string;
      /** Format: date-time */
      end: string;
    };
    Me: {
      self: components["schemas"]["User"];
      member?: components["schemas"]["Member"];
      currentWorkspace?: components["schemas"]["Workspace"];
    };
  };
  responses: {
    /** @description General Error */
    GeneralError: {
      content: {
        "application/json": {
          /**
           * @description The HTTP status code generated for this occurrence of the problem.
           * @example 400
           */
          status?: number;
          /**
           * @description error type
           * @example invalid_item_id
           */
          type?: string;
          /** @description A short, human-readable summary of the problem type */
          title?: string;
          /** @description A human-readable explanation specific to this occurrence of the problem. */
          detail?: string;
          /**
           * @description error code
           * @example invalid_item_id
           */
          code?: string;
        };
      };
    };
    /** @description Bad request */
    BadRequestError: {
      content: {
        "application/json": {
          /**
           * @description The HTTP status code generated for this occurrence of the problem.
           * @example 400
           */
          status?: number;
          /**
           * @description error type
           * @example invalid_item_id
           */
          type?: string;
          /** @description A short, human-readable summary of the problem type */
          title?: string;
          /** @description A human-readable explanation specific to this occurrence of the problem. */
          detail?: string;
          /**
           * @description error code
           * @example invalid_item_id
           */
          code?: string;
        };
      };
    };
    /** @description Entity not found. */
    NotFoundError: {
      content: {
        "application/json": {
          /**
           * @description The HTTP status code generated for this occurrence of the problem.
           * @example 400
           */
          status?: number;
          /**
           * @description error type
           * @example invalid_item_id
           */
          type?: string;
          /** @description A short, human-readable summary of the problem type */
          title?: string;
          /** @description A human-readable explanation specific to this occurrence of the problem. */
          detail?: string;
          /**
           * @description error code
           * @example invalid_item_id
           */
          code?: string;
        };
      };
    };
    /** @description Unauthorized */
    UnauthorizedError: {
      content: {
        "application/json": {
          /**
           * @description The HTTP status code generated for this occurrence of the problem.
           * @example 400
           */
          status?: number;
          /**
           * @description error type
           * @example invalid_item_id
           */
          type?: string;
          /** @description A short, human-readable summary of the problem type */
          title?: string;
          /** @description A human-readable explanation specific to this occurrence of the problem. */
          detail?: string;
          /**
           * @description error code
           * @example invalid_item_id
           */
          code?: string;
        };
      };
    };
    /** @description Conflict */
    ConflictError: {
      content: {
        "application/json": {
          /**
           * @description The HTTP status code generated for this occurrence of the problem.
           * @example 400
           */
          status?: number;
          /**
           * @description error type
           * @example invalid_item_id
           */
          type?: string;
          /** @description A short, human-readable summary of the problem type */
          title?: string;
          /** @description A human-readable explanation specific to this occurrence of the problem. */
          detail?: string;
          /**
           * @description error code
           * @example invalid_item_id
           */
          code?: string;
        };
      };
    };
    /** @description Too many requests */
    TooManyRequestsError: {
      content: {
        "application/json": {
          /**
           * @description The HTTP status code generated for this occurrence of the problem.
           * @example 400
           */
          status?: number;
          /**
           * @description error type
           * @example invalid_item_id
           */
          type?: string;
          /** @description A short, human-readable summary of the problem type */
          title?: string;
          /** @description A human-readable explanation specific to this occurrence of the problem. */
          detail?: string;
          /**
           * @description error code
           * @example invalid_item_id
           */
          code?: string;
        };
      };
    };
    /** @description Internal server error */
    InternalServerError: {
      content: {
        "application/json": {
          /**
           * @description The HTTP status code generated for this occurrence of the problem.
           * @example 400
           */
          status?: number;
          /**
           * @description error type
           * @example invalid_item_id
           */
          type?: string;
          /** @description A short, human-readable summary of the problem type */
          title?: string;
          /** @description A human-readable explanation specific to this occurrence of the problem. */
          detail?: string;
          /**
           * @description error code
           * @example invalid_item_id
           */
          code?: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: {
    /** @description Creates a new workspace */
    CreateWorkspace: {
      content: {
        "application/json": {
          /** @description workspace name */
          name: string;
          /** @description workspace subdomain (e.x. example-test) */
          subdomain: string;
        };
      };
    };
    /** @description Update Name */
    UpdateName: {
      content: {
        "application/json": {
          /**
           * @description Name
           * @example John Doe
           */
          name: string;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Update Name
   * @description Update Name
   */
  updateName: {
    requestBody: components["requestBodies"]["UpdateName"];
    responses: {
      /** @description Update Name response */
      200: {
        content: {
          "application/json": components["schemas"]["Me"];
        };
      };
      400: components["responses"]["BadRequestError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /**
   * Login
   * @description Login
   */
  login: {
    responses: {
      /** @description Login response */
      200: {
        content: {
          "application/json": components["schemas"]["Me"];
        };
      };
      500: components["responses"]["InternalServerError"];
    };
  };
}
