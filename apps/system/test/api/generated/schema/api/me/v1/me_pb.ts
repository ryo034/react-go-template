// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file me/v1/me.proto (package me.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { User } from "../../user/v1/user_pb.js";

/**
 * @generated from message me.v1.MultiFactor
 */
export class MultiFactor extends Message<MultiFactor> {
  /**
   * @generated from field: string factor_id = 1;
   */
  factorId = "";

  /**
   * @generated from field: string phone_number = 2;
   */
  phoneNumber = "";

  constructor(data?: PartialMessage<MultiFactor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.MultiFactor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "factor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiFactor {
    return new MultiFactor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiFactor {
    return new MultiFactor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiFactor {
    return new MultiFactor().fromJsonString(jsonString, options);
  }

  static equals(a: MultiFactor | PlainMessage<MultiFactor> | undefined, b: MultiFactor | PlainMessage<MultiFactor> | undefined): boolean {
    return proto3.util.equals(MultiFactor, a, b);
  }
}

/**
 * @generated from message me.v1.Info
 */
export class Info extends Message<Info> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: user.v1.User user = 2;
   */
  user?: User;

  constructor(data?: PartialMessage<Info>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.Info";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Info {
    return new Info().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Info {
    return new Info().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Info {
    return new Info().fromJsonString(jsonString, options);
  }

  static equals(a: Info | PlainMessage<Info> | undefined, b: Info | PlainMessage<Info> | undefined): boolean {
    return proto3.util.equals(Info, a, b);
  }
}

/**
 * @generated from message me.v1.Me
 */
export class Me extends Message<Me> {
  /**
   * @generated from field: bool email_verified = 1;
   */
  emailVerified = false;

  /**
   * @generated from field: optional me.v1.MultiFactor multi_factor = 2;
   */
  multiFactor?: MultiFactor;

  /**
   * @generated from field: me.v1.Info info = 3;
   */
  info?: Info;

  constructor(data?: PartialMessage<Me>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.Me";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "multi_factor", kind: "message", T: MultiFactor, opt: true },
    { no: 3, name: "info", kind: "message", T: Info },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Me {
    return new Me().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Me {
    return new Me().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Me {
    return new Me().fromJsonString(jsonString, options);
  }

  static equals(a: Me | PlainMessage<Me> | undefined, b: Me | PlainMessage<Me> | undefined): boolean {
    return proto3.util.equals(Me, a, b);
  }
}

/**
 * @generated from message me.v1.LoginRequest
 */
export class LoginRequest extends Message<LoginRequest> {
  constructor(data?: PartialMessage<LoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.LoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRequest {
    return new LoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginRequest | PlainMessage<LoginRequest> | undefined, b: LoginRequest | PlainMessage<LoginRequest> | undefined): boolean {
    return proto3.util.equals(LoginRequest, a, b);
  }
}

/**
 * @generated from message me.v1.LoginResponse
 */
export class LoginResponse extends Message<LoginResponse> {
  /**
   * @generated from field: me.v1.Me me = 1;
   */
  me?: Me;

  constructor(data?: PartialMessage<LoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.LoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "me", kind: "message", T: Me },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResponse {
    return new LoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginResponse | PlainMessage<LoginResponse> | undefined, b: LoginResponse | PlainMessage<LoginResponse> | undefined): boolean {
    return proto3.util.equals(LoginResponse, a, b);
  }
}

/**
 * @generated from message me.v1.SignUpRequest
 */
export class SignUpRequest extends Message<SignUpRequest> {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 2;
   */
  lastName = "";

  constructor(data?: PartialMessage<SignUpRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.SignUpRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignUpRequest {
    return new SignUpRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignUpRequest {
    return new SignUpRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignUpRequest {
    return new SignUpRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignUpRequest | PlainMessage<SignUpRequest> | undefined, b: SignUpRequest | PlainMessage<SignUpRequest> | undefined): boolean {
    return proto3.util.equals(SignUpRequest, a, b);
  }
}

/**
 * @generated from message me.v1.SignUpResponse
 */
export class SignUpResponse extends Message<SignUpResponse> {
  /**
   * @generated from field: me.v1.Me me = 1;
   */
  me?: Me;

  constructor(data?: PartialMessage<SignUpResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.SignUpResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "me", kind: "message", T: Me },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignUpResponse {
    return new SignUpResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignUpResponse {
    return new SignUpResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignUpResponse {
    return new SignUpResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SignUpResponse | PlainMessage<SignUpResponse> | undefined, b: SignUpResponse | PlainMessage<SignUpResponse> | undefined): boolean {
    return proto3.util.equals(SignUpResponse, a, b);
  }
}

/**
 * @generated from message me.v1.RegisterCompleteRequest
 */
export class RegisterCompleteRequest extends Message<RegisterCompleteRequest> {
  constructor(data?: PartialMessage<RegisterCompleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.RegisterCompleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterCompleteRequest {
    return new RegisterCompleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterCompleteRequest {
    return new RegisterCompleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterCompleteRequest {
    return new RegisterCompleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterCompleteRequest | PlainMessage<RegisterCompleteRequest> | undefined, b: RegisterCompleteRequest | PlainMessage<RegisterCompleteRequest> | undefined): boolean {
    return proto3.util.equals(RegisterCompleteRequest, a, b);
  }
}

/**
 * @generated from message me.v1.RegisterCompleteResponse
 */
export class RegisterCompleteResponse extends Message<RegisterCompleteResponse> {
  /**
   * @generated from field: me.v1.Me me = 1;
   */
  me?: Me;

  constructor(data?: PartialMessage<RegisterCompleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.RegisterCompleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "me", kind: "message", T: Me },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterCompleteResponse {
    return new RegisterCompleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterCompleteResponse {
    return new RegisterCompleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterCompleteResponse {
    return new RegisterCompleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterCompleteResponse | PlainMessage<RegisterCompleteResponse> | undefined, b: RegisterCompleteResponse | PlainMessage<RegisterCompleteResponse> | undefined): boolean {
    return proto3.util.equals(RegisterCompleteResponse, a, b);
  }
}

/**
 * @generated from message me.v1.FindRequest
 */
export class FindRequest extends Message<FindRequest> {
  constructor(data?: PartialMessage<FindRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.FindRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindRequest {
    return new FindRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindRequest {
    return new FindRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindRequest {
    return new FindRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FindRequest | PlainMessage<FindRequest> | undefined, b: FindRequest | PlainMessage<FindRequest> | undefined): boolean {
    return proto3.util.equals(FindRequest, a, b);
  }
}

/**
 * @generated from message me.v1.FindResponse
 */
export class FindResponse extends Message<FindResponse> {
  /**
   * @generated from field: me.v1.Me me = 1;
   */
  me?: Me;

  constructor(data?: PartialMessage<FindResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.FindResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "me", kind: "message", T: Me },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindResponse {
    return new FindResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindResponse {
    return new FindResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindResponse {
    return new FindResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FindResponse | PlainMessage<FindResponse> | undefined, b: FindResponse | PlainMessage<FindResponse> | undefined): boolean {
    return proto3.util.equals(FindResponse, a, b);
  }
}

/**
 * @generated from message me.v1.UpdateNameRequest
 */
export class UpdateNameRequest extends Message<UpdateNameRequest> {
  /**
   * @generated from field: string firstName = 1;
   */
  firstName = "";

  /**
   * @generated from field: string lastName = 2;
   */
  lastName = "";

  constructor(data?: PartialMessage<UpdateNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.UpdateNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "firstName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lastName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateNameRequest {
    return new UpdateNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateNameRequest {
    return new UpdateNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateNameRequest {
    return new UpdateNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateNameRequest | PlainMessage<UpdateNameRequest> | undefined, b: UpdateNameRequest | PlainMessage<UpdateNameRequest> | undefined): boolean {
    return proto3.util.equals(UpdateNameRequest, a, b);
  }
}

/**
 * @generated from message me.v1.UpdateNameResponse
 */
export class UpdateNameResponse extends Message<UpdateNameResponse> {
  /**
   * @generated from field: me.v1.Me me = 1;
   */
  me?: Me;

  constructor(data?: PartialMessage<UpdateNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.UpdateNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "me", kind: "message", T: Me },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateNameResponse {
    return new UpdateNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateNameResponse {
    return new UpdateNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateNameResponse {
    return new UpdateNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateNameResponse | PlainMessage<UpdateNameResponse> | undefined, b: UpdateNameResponse | PlainMessage<UpdateNameResponse> | undefined): boolean {
    return proto3.util.equals(UpdateNameResponse, a, b);
  }
}

/**
 * @generated from message me.v1.UpdateEmailRequest
 */
export class UpdateEmailRequest extends Message<UpdateEmailRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<UpdateEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.UpdateEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEmailRequest {
    return new UpdateEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEmailRequest {
    return new UpdateEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEmailRequest {
    return new UpdateEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEmailRequest | PlainMessage<UpdateEmailRequest> | undefined, b: UpdateEmailRequest | PlainMessage<UpdateEmailRequest> | undefined): boolean {
    return proto3.util.equals(UpdateEmailRequest, a, b);
  }
}

/**
 * @generated from message me.v1.UpdateEmailResponse
 */
export class UpdateEmailResponse extends Message<UpdateEmailResponse> {
  /**
   * @generated from field: me.v1.Me me = 1;
   */
  me?: Me;

  constructor(data?: PartialMessage<UpdateEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.UpdateEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "me", kind: "message", T: Me },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEmailResponse {
    return new UpdateEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEmailResponse {
    return new UpdateEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEmailResponse {
    return new UpdateEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEmailResponse | PlainMessage<UpdateEmailResponse> | undefined, b: UpdateEmailResponse | PlainMessage<UpdateEmailResponse> | undefined): boolean {
    return proto3.util.equals(UpdateEmailResponse, a, b);
  }
}

/**
 * @generated from message me.v1.UpdatePhoneNumberRequest
 */
export class UpdatePhoneNumberRequest extends Message<UpdatePhoneNumberRequest> {
  /**
   * @generated from field: string phone_number = 1;
   */
  phoneNumber = "";

  constructor(data?: PartialMessage<UpdatePhoneNumberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.UpdatePhoneNumberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePhoneNumberRequest {
    return new UpdatePhoneNumberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePhoneNumberRequest {
    return new UpdatePhoneNumberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePhoneNumberRequest {
    return new UpdatePhoneNumberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePhoneNumberRequest | PlainMessage<UpdatePhoneNumberRequest> | undefined, b: UpdatePhoneNumberRequest | PlainMessage<UpdatePhoneNumberRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePhoneNumberRequest, a, b);
  }
}

/**
 * @generated from message me.v1.UpdatePhoneNumberResponse
 */
export class UpdatePhoneNumberResponse extends Message<UpdatePhoneNumberResponse> {
  /**
   * @generated from field: me.v1.Me me = 1;
   */
  me?: Me;

  constructor(data?: PartialMessage<UpdatePhoneNumberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "me.v1.UpdatePhoneNumberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "me", kind: "message", T: Me },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePhoneNumberResponse {
    return new UpdatePhoneNumberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePhoneNumberResponse {
    return new UpdatePhoneNumberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePhoneNumberResponse {
    return new UpdatePhoneNumberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePhoneNumberResponse | PlainMessage<UpdatePhoneNumberResponse> | undefined, b: UpdatePhoneNumberResponse | PlainMessage<UpdatePhoneNumberResponse> | undefined): boolean {
    return proto3.util.equals(UpdatePhoneNumberResponse, a, b);
  }
}

