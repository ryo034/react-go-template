// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file shared/media/v1/media.proto (package media.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum media.v1.MediaType
 */
export enum MediaType {
  /**
   * @generated from enum value: MEDIA_TYPE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: MEDIA_TYPE_JPG = 1;
   */
  JPG = 1,

  /**
   * @generated from enum value: MEDIA_TYPE_PNG = 2;
   */
  PNG = 2,

  /**
   * @generated from enum value: MEDIA_TYPE_HIEC = 3;
   */
  HIEC = 3,

  /**
   * @generated from enum value: MEDIA_TYPE_WEBP = 4;
   */
  WEBP = 4,

  /**
   * @generated from enum value: MEDIA_TYPE_MOV = 5;
   */
  MOV = 5,

  /**
   * @generated from enum value: MEDIA_TYPE_MP4 = 6;
   */
  MP4 = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(MediaType)
proto3.util.setEnumType(MediaType, "media.v1.MediaType", [
  { no: 0, name: "MEDIA_TYPE_UNKNOWN" },
  { no: 1, name: "MEDIA_TYPE_JPG" },
  { no: 2, name: "MEDIA_TYPE_PNG" },
  { no: 3, name: "MEDIA_TYPE_HIEC" },
  { no: 4, name: "MEDIA_TYPE_WEBP" },
  { no: 5, name: "MEDIA_TYPE_MOV" },
  { no: 6, name: "MEDIA_TYPE_MP4" },
]);

/**
 * @generated from message media.v1.MediaBaseInfo
 */
export class MediaBaseInfo extends Message<MediaBaseInfo> {
  /**
   * @generated from field: media.v1.MediaType media_type = 1;
   */
  mediaType = MediaType.UNKNOWN;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: uint32 order = 3;
   */
  order = 0;

  constructor(data?: PartialMessage<MediaBaseInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "media.v1.MediaBaseInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media_type", kind: "enum", T: proto3.getEnumType(MediaType) },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "order", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaBaseInfo {
    return new MediaBaseInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaBaseInfo {
    return new MediaBaseInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaBaseInfo {
    return new MediaBaseInfo().fromJsonString(jsonString, options);
  }

  static equals(a: MediaBaseInfo | PlainMessage<MediaBaseInfo> | undefined, b: MediaBaseInfo | PlainMessage<MediaBaseInfo> | undefined): boolean {
    return proto3.util.equals(MediaBaseInfo, a, b);
  }
}

/**
 * @generated from message media.v1.MediaContent
 */
export class MediaContent extends Message<MediaContent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: media.v1.MediaBaseInfo base = 2;
   */
  base?: MediaBaseInfo;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  constructor(data?: PartialMessage<MediaContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "media.v1.MediaContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "base", kind: "message", T: MediaBaseInfo },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaContent {
    return new MediaContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaContent {
    return new MediaContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaContent {
    return new MediaContent().fromJsonString(jsonString, options);
  }

  static equals(a: MediaContent | PlainMessage<MediaContent> | undefined, b: MediaContent | PlainMessage<MediaContent> | undefined): boolean {
    return proto3.util.equals(MediaContent, a, b);
  }
}

/**
 * @generated from message media.v1.Image
 */
export class Image extends Message<Image> {
  /**
   * @generated from field: media.v1.MediaContent content = 1;
   */
  content?: MediaContent;

  constructor(data?: PartialMessage<Image>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "media.v1.Image";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: MediaContent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Image {
    return new Image().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Image {
    return new Image().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Image {
    return new Image().fromJsonString(jsonString, options);
  }

  static equals(a: Image | PlainMessage<Image> | undefined, b: Image | PlainMessage<Image> | undefined): boolean {
    return proto3.util.equals(Image, a, b);
  }
}

/**
 * @generated from message media.v1.Video
 */
export class Video extends Message<Video> {
  /**
   * @generated from field: media.v1.MediaContent content = 1;
   */
  content?: MediaContent;

  /**
   * @generated from field: media.v1.MediaContent thumbnail = 2;
   */
  thumbnail?: MediaContent;

  constructor(data?: PartialMessage<Video>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "media.v1.Video";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: MediaContent },
    { no: 2, name: "thumbnail", kind: "message", T: MediaContent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Video {
    return new Video().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Video {
    return new Video().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Video {
    return new Video().fromJsonString(jsonString, options);
  }

  static equals(a: Video | PlainMessage<Video> | undefined, b: Video | PlainMessage<Video> | undefined): boolean {
    return proto3.util.equals(Video, a, b);
  }
}

/**
 * @generated from message media.v1.Media
 */
export class Media extends Message<Media> {
  /**
   * @generated from oneof media.v1.Media.content
   */
  content: {
    /**
     * @generated from field: media.v1.Image image = 1;
     */
    value: Image;
    case: "image";
  } | {
    /**
     * @generated from field: media.v1.Video video = 2;
     */
    value: Video;
    case: "video";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Media>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "media.v1.Media";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "message", T: Image, oneof: "content" },
    { no: 2, name: "video", kind: "message", T: Video, oneof: "content" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Media {
    return new Media().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Media {
    return new Media().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Media {
    return new Media().fromJsonString(jsonString, options);
  }

  static equals(a: Media | PlainMessage<Media> | undefined, b: Media | PlainMessage<Media> | undefined): boolean {
    return proto3.util.equals(Media, a, b);
  }
}

/**
 * @generated from message media.v1.UploadContent
 */
export class UploadContent extends Message<UploadContent> {
  /**
   * @generated from oneof media.v1.UploadContent.photo_content
   */
  photoContent: {
    /**
     * @generated from field: media.v1.MediaBaseInfo info = 1;
     */
    value: MediaBaseInfo;
    case: "info";
  } | {
    /**
     * @generated from field: bytes upload_file = 2;
     */
    value: Uint8Array;
    case: "uploadFile";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UploadContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "media.v1.UploadContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: MediaBaseInfo, oneof: "photo_content" },
    { no: 2, name: "upload_file", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "photo_content" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadContent {
    return new UploadContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadContent {
    return new UploadContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadContent {
    return new UploadContent().fromJsonString(jsonString, options);
  }

  static equals(a: UploadContent | PlainMessage<UploadContent> | undefined, b: UploadContent | PlainMessage<UploadContent> | undefined): boolean {
    return proto3.util.equals(UploadContent, a, b);
  }
}

/**
 * @generated from message media.v1.UploadImage
 */
export class UploadImage extends Message<UploadImage> {
  /**
   * @generated from field: media.v1.UploadContent content = 1;
   */
  content?: UploadContent;

  constructor(data?: PartialMessage<UploadImage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "media.v1.UploadImage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: UploadContent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadImage {
    return new UploadImage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadImage {
    return new UploadImage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadImage {
    return new UploadImage().fromJsonString(jsonString, options);
  }

  static equals(a: UploadImage | PlainMessage<UploadImage> | undefined, b: UploadImage | PlainMessage<UploadImage> | undefined): boolean {
    return proto3.util.equals(UploadImage, a, b);
  }
}

/**
 * @generated from message media.v1.UploadVideo
 */
export class UploadVideo extends Message<UploadVideo> {
  /**
   * @generated from oneof media.v1.UploadVideo.video_content
   */
  videoContent: {
    /**
     * @generated from field: media.v1.UploadContent thumbnail = 1;
     */
    value: UploadContent;
    case: "thumbnail";
  } | {
    /**
     * @generated from field: media.v1.UploadContent main_content = 2;
     */
    value: UploadContent;
    case: "mainContent";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UploadVideo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "media.v1.UploadVideo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "thumbnail", kind: "message", T: UploadContent, oneof: "video_content" },
    { no: 2, name: "main_content", kind: "message", T: UploadContent, oneof: "video_content" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadVideo {
    return new UploadVideo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadVideo {
    return new UploadVideo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadVideo {
    return new UploadVideo().fromJsonString(jsonString, options);
  }

  static equals(a: UploadVideo | PlainMessage<UploadVideo> | undefined, b: UploadVideo | PlainMessage<UploadVideo> | undefined): boolean {
    return proto3.util.equals(UploadVideo, a, b);
  }
}

/**
 * @generated from message media.v1.MixedUploadContent
 */
export class MixedUploadContent extends Message<MixedUploadContent> {
  /**
   * @generated from oneof media.v1.MixedUploadContent.mixed_content
   */
  mixedContent: {
    /**
     * @generated from field: media.v1.UploadImage image = 1;
     */
    value: UploadImage;
    case: "image";
  } | {
    /**
     * @generated from field: media.v1.UploadVideo video = 2;
     */
    value: UploadVideo;
    case: "video";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MixedUploadContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "media.v1.MixedUploadContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "message", T: UploadImage, oneof: "mixed_content" },
    { no: 2, name: "video", kind: "message", T: UploadVideo, oneof: "mixed_content" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MixedUploadContent {
    return new MixedUploadContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MixedUploadContent {
    return new MixedUploadContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MixedUploadContent {
    return new MixedUploadContent().fromJsonString(jsonString, options);
  }

  static equals(a: MixedUploadContent | PlainMessage<MixedUploadContent> | undefined, b: MixedUploadContent | PlainMessage<MixedUploadContent> | undefined): boolean {
    return proto3.util.equals(MixedUploadContent, a, b);
  }
}

