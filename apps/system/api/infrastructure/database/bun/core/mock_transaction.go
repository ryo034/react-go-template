// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go
//
// Generated by this command:
//
//	mockgen -source=transaction.go -destination=mock_transaction.go -package=core
//

// Package core is a generated GoMock package.
package core

import (
	context "context"
	reflect "reflect"
	time "time"

	function "github.com/ryo034/react-go-template/apps/system/api/util/reflect/function"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionProvider is a mock of TransactionProvider interface.
type MockTransactionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionProviderMockRecorder
}

// MockTransactionProviderMockRecorder is the mock recorder for MockTransactionProvider.
type MockTransactionProviderMockRecorder struct {
	mock *MockTransactionProvider
}

// NewMockTransactionProvider creates a new mock instance.
func NewMockTransactionProvider(ctrl *gomock.Controller) *MockTransactionProvider {
	mock := &MockTransactionProvider{ctrl: ctrl}
	mock.recorder = &MockTransactionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionProvider) EXPECT() *MockTransactionProviderMockRecorder {
	return m.recorder
}

// Provide mocks base method.
func (m *MockTransactionProvider) Provide(ctx context.Context) (TransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provide", ctx)
	ret0, _ := ret[0].(TransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provide indicates an expected call of Provide.
func (mr *MockTransactionProviderMockRecorder) Provide(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockTransactionProvider)(nil).Provide), ctx)
}

// MockTransactionResult is a mock of TransactionResult interface.
type MockTransactionResult struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionResultMockRecorder
}

// MockTransactionResultMockRecorder is the mock recorder for MockTransactionResult.
type MockTransactionResultMockRecorder struct {
	mock *MockTransactionResult
}

// NewMockTransactionResult creates a new mock instance.
func NewMockTransactionResult(ctrl *gomock.Controller) *MockTransactionResult {
	mock := &MockTransactionResult{ctrl: ctrl}
	mock.recorder = &MockTransactionResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionResult) EXPECT() *MockTransactionResultMockRecorder {
	return m.recorder
}

// Deadline mocks base method.
func (m *MockTransactionResult) Deadline() (time.Time, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deadline")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Deadline indicates an expected call of Deadline.
func (mr *MockTransactionResultMockRecorder) Deadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deadline", reflect.TypeOf((*MockTransactionResult)(nil).Deadline))
}

// Done mocks base method.
func (m *MockTransactionResult) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockTransactionResultMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockTransactionResult)(nil).Done))
}

// Err mocks base method.
func (m *MockTransactionResult) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockTransactionResultMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockTransactionResult)(nil).Err))
}

// Transactional mocks base method.
func (m *MockTransactionResult) Transactional(fn any) function.AnyFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transactional", fn)
	ret0, _ := ret[0].(function.AnyFunc)
	return ret0
}

// Transactional indicates an expected call of Transactional.
func (mr *MockTransactionResultMockRecorder) Transactional(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transactional", reflect.TypeOf((*MockTransactionResult)(nil).Transactional), fn)
}

// Value mocks base method.
func (m *MockTransactionResult) Value(key any) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockTransactionResultMockRecorder) Value(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockTransactionResult)(nil).Value), key)
}
