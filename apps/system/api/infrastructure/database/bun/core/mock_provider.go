// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go
//
// Generated by this command:
//
//	mockgen -source=provider.go -destination=mock_provider.go -package=core
//

// Package core is a generated GoMock package.
package core

import (
	context "context"
	reflect "reflect"

	bun "github.com/uptrace/bun"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetExecutor mocks base method.
func (m *MockProvider) GetExecutor(ctx context.Context, isRead bool) bun.IDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutor", ctx, isRead)
	ret0, _ := ret[0].(bun.IDB)
	return ret0
}

// GetExecutor indicates an expected call of GetExecutor.
func (mr *MockProviderMockRecorder) GetExecutor(ctx, isRead any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutor", reflect.TypeOf((*MockProvider)(nil).GetExecutor), ctx, isRead)
}
