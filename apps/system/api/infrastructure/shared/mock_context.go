// Code generated by MockGen. DO NOT EDIT.
// Source: context.go
//
// Generated by this command:
//
//	mockgen -source=context.go -destination=mock_context.go -package=shared
//

// Package shared is a generated GoMock package.
package shared

import (
	context "context"
	reflect "reflect"

	provider "github.com/ryo034/react-go-template/apps/system/api/domain/me/provider"
	account "github.com/ryo034/react-go-template/apps/system/api/domain/shared/account"
	member "github.com/ryo034/react-go-template/apps/system/api/domain/workspace/member"
	gomock "go.uber.org/mock/gomock"
	language "golang.org/x/text/language"
)

// MockContextOperator is a mock of ContextOperator interface.
type MockContextOperator struct {
	ctrl     *gomock.Controller
	recorder *MockContextOperatorMockRecorder
}

// MockContextOperatorMockRecorder is the mock recorder for MockContextOperator.
type MockContextOperatorMockRecorder struct {
	mock *MockContextOperator
}

// NewMockContextOperator creates a new mock instance.
func NewMockContextOperator(ctrl *gomock.Controller) *MockContextOperator {
	mock := &MockContextOperator{ctrl: ctrl}
	mock.recorder = &MockContextOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextOperator) EXPECT() *MockContextOperatorMockRecorder {
	return m.recorder
}

// GetAuthProviderUID mocks base method.
func (m *MockContextOperator) GetAuthProviderUID(ctx context.Context) (provider.UID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthProviderUID", ctx)
	ret0, _ := ret[0].(provider.UID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthProviderUID indicates an expected call of GetAuthProviderUID.
func (mr *MockContextOperatorMockRecorder) GetAuthProviderUID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthProviderUID", reflect.TypeOf((*MockContextOperator)(nil).GetAuthProviderUID), ctx)
}

// GetLang mocks base method.
func (m *MockContextOperator) GetLang(ctx context.Context) (language.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLang", ctx)
	ret0, _ := ret[0].(language.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLang indicates an expected call of GetLang.
func (mr *MockContextOperatorMockRecorder) GetLang(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLang", reflect.TypeOf((*MockContextOperator)(nil).GetLang), ctx)
}

// GetRole mocks base method.
func (m *MockContextOperator) GetRole(ctx context.Context) (member.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx)
	ret0, _ := ret[0].(member.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockContextOperatorMockRecorder) GetRole(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockContextOperator)(nil).GetRole), ctx)
}

// GetUID mocks base method.
func (m *MockContextOperator) GetUID(ctx context.Context) (account.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUID", ctx)
	ret0, _ := ret[0].(account.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUID indicates an expected call of GetUID.
func (mr *MockContextOperatorMockRecorder) GetUID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUID", reflect.TypeOf((*MockContextOperator)(nil).GetUID), ctx)
}

// GetUIDWithNil mocks base method.
func (m *MockContextOperator) GetUIDWithNil(ctx context.Context) (*account.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUIDWithNil", ctx)
	ret0, _ := ret[0].(*account.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUIDWithNil indicates an expected call of GetUIDWithNil.
func (mr *MockContextOperatorMockRecorder) GetUIDWithNil(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUIDWithNil", reflect.TypeOf((*MockContextOperator)(nil).GetUIDWithNil), ctx)
}

// SetAuthProviderUID mocks base method.
func (m *MockContextOperator) SetAuthProviderUID(ctx context.Context, apUID provider.UID) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAuthProviderUID", ctx, apUID)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// SetAuthProviderUID indicates an expected call of SetAuthProviderUID.
func (mr *MockContextOperatorMockRecorder) SetAuthProviderUID(ctx, apUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthProviderUID", reflect.TypeOf((*MockContextOperator)(nil).SetAuthProviderUID), ctx, apUID)
}

// SetClaim mocks base method.
func (m *MockContextOperator) SetClaim(ctx context.Context, claim map[string]any) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClaim", ctx, claim)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// SetClaim indicates an expected call of SetClaim.
func (mr *MockContextOperatorMockRecorder) SetClaim(ctx, claim any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClaim", reflect.TypeOf((*MockContextOperator)(nil).SetClaim), ctx, claim)
}

// SetLang mocks base method.
func (m *MockContextOperator) SetLang(ctx context.Context, lang language.Tag) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLang", ctx, lang)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// SetLang indicates an expected call of SetLang.
func (mr *MockContextOperatorMockRecorder) SetLang(ctx, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLang", reflect.TypeOf((*MockContextOperator)(nil).SetLang), ctx, lang)
}

// SetRole mocks base method.
func (m *MockContextOperator) SetRole(ctx context.Context, role member.Role) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRole", ctx, role)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// SetRole indicates an expected call of SetRole.
func (mr *MockContextOperatorMockRecorder) SetRole(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRole", reflect.TypeOf((*MockContextOperator)(nil).SetRole), ctx, role)
}

// SetUID mocks base method.
func (m *MockContextOperator) SetUID(ctx context.Context, uID string) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUID", ctx, uID)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// SetUID indicates an expected call of SetUID.
func (mr *MockContextOperatorMockRecorder) SetUID(ctx, uID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUID", reflect.TypeOf((*MockContextOperator)(nil).SetUID), ctx, uID)
}
