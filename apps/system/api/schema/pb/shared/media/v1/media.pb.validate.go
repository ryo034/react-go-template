// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shared/media/v1/media.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MediaBaseInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MediaBaseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MediaBaseInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MediaBaseInfoMultiError, or
// nil if none found.
func (m *MediaBaseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MediaBaseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MediaType

	// no validation rules for Name

	// no validation rules for Order

	if len(errors) > 0 {
		return MediaBaseInfoMultiError(errors)
	}

	return nil
}

// MediaBaseInfoMultiError is an error wrapping multiple validation errors
// returned by MediaBaseInfo.ValidateAll() if the designated constraints
// aren't met.
type MediaBaseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MediaBaseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MediaBaseInfoMultiError) AllErrors() []error { return m }

// MediaBaseInfoValidationError is the validation error returned by
// MediaBaseInfo.Validate if the designated constraints aren't met.
type MediaBaseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaBaseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaBaseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaBaseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaBaseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaBaseInfoValidationError) ErrorName() string { return "MediaBaseInfoValidationError" }

// Error satisfies the builtin error interface
func (e MediaBaseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMediaBaseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaBaseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaBaseInfoValidationError{}

// Validate checks the field values on MediaContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MediaContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MediaContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MediaContentMultiError, or
// nil if none found.
func (m *MediaContent) ValidateAll() error {
	return m.validate(true)
}

func (m *MediaContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MediaContentValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MediaContentValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MediaContentValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Url

	if len(errors) > 0 {
		return MediaContentMultiError(errors)
	}

	return nil
}

// MediaContentMultiError is an error wrapping multiple validation errors
// returned by MediaContent.ValidateAll() if the designated constraints aren't met.
type MediaContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MediaContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MediaContentMultiError) AllErrors() []error { return m }

// MediaContentValidationError is the validation error returned by
// MediaContent.Validate if the designated constraints aren't met.
type MediaContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaContentValidationError) ErrorName() string { return "MediaContentValidationError" }

// Error satisfies the builtin error interface
func (e MediaContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMediaContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaContentValidationError{}

// Validate checks the field values on Image with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Image with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ImageMultiError, or nil if none found.
func (m *Image) ValidateAll() error {
	return m.validate(true)
}

func (m *Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImageValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImageValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ImageMultiError(errors)
	}

	return nil
}

// ImageMultiError is an error wrapping multiple validation errors returned by
// Image.ValidateAll() if the designated constraints aren't met.
type ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageMultiError) AllErrors() []error { return m }

// ImageValidationError is the validation error returned by Image.Validate if
// the designated constraints aren't met.
type ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageValidationError) ErrorName() string { return "ImageValidationError" }

// Error satisfies the builtin error interface
func (e ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageValidationError{}

// Validate checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Video) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VideoMultiError, or nil if none found.
func (m *Video) ValidateAll() error {
	return m.validate(true)
}

func (m *Video) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetThumbnail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoValidationError{
					field:  "Thumbnail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoValidationError{
					field:  "Thumbnail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThumbnail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoValidationError{
				field:  "Thumbnail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VideoMultiError(errors)
	}

	return nil
}

// VideoMultiError is an error wrapping multiple validation errors returned by
// Video.ValidateAll() if the designated constraints aren't met.
type VideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMultiError) AllErrors() []error { return m }

// VideoValidationError is the validation error returned by Video.Validate if
// the designated constraints aren't met.
type VideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoValidationError) ErrorName() string { return "VideoValidationError" }

// Error satisfies the builtin error interface
func (e VideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoValidationError{}

// Validate checks the field values on Media with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Media) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Media with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MediaMultiError, or nil if none found.
func (m *Media) ValidateAll() error {
	return m.validate(true)
}

func (m *Media) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Content.(type) {
	case *Media_Image:
		if v == nil {
			err := MediaValidationError{
				field:  "Content",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetImage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MediaValidationError{
						field:  "Image",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MediaValidationError{
						field:  "Image",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MediaValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Media_Video:
		if v == nil {
			err := MediaValidationError{
				field:  "Content",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVideo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MediaValidationError{
						field:  "Video",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MediaValidationError{
						field:  "Video",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MediaValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return MediaMultiError(errors)
	}

	return nil
}

// MediaMultiError is an error wrapping multiple validation errors returned by
// Media.ValidateAll() if the designated constraints aren't met.
type MediaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MediaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MediaMultiError) AllErrors() []error { return m }

// MediaValidationError is the validation error returned by Media.Validate if
// the designated constraints aren't met.
type MediaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaValidationError) ErrorName() string { return "MediaValidationError" }

// Error satisfies the builtin error interface
func (e MediaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedia.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaValidationError{}

// Validate checks the field values on UploadContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadContentMultiError, or
// nil if none found.
func (m *UploadContent) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.PhotoContent.(type) {
	case *UploadContent_Info:
		if v == nil {
			err := UploadContentValidationError{
				field:  "PhotoContent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UploadContentValidationError{
						field:  "Info",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UploadContentValidationError{
						field:  "Info",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UploadContentValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UploadContent_UploadFile:
		if v == nil {
			err := UploadContentValidationError{
				field:  "PhotoContent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for UploadFile
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UploadContentMultiError(errors)
	}

	return nil
}

// UploadContentMultiError is an error wrapping multiple validation errors
// returned by UploadContent.ValidateAll() if the designated constraints
// aren't met.
type UploadContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadContentMultiError) AllErrors() []error { return m }

// UploadContentValidationError is the validation error returned by
// UploadContent.Validate if the designated constraints aren't met.
type UploadContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadContentValidationError) ErrorName() string { return "UploadContentValidationError" }

// Error satisfies the builtin error interface
func (e UploadContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadContentValidationError{}

// Validate checks the field values on UploadImage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadImage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadImageMultiError, or
// nil if none found.
func (m *UploadImage) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadImageValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadImageValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadImageValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UploadImageMultiError(errors)
	}

	return nil
}

// UploadImageMultiError is an error wrapping multiple validation errors
// returned by UploadImage.ValidateAll() if the designated constraints aren't met.
type UploadImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadImageMultiError) AllErrors() []error { return m }

// UploadImageValidationError is the validation error returned by
// UploadImage.Validate if the designated constraints aren't met.
type UploadImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadImageValidationError) ErrorName() string { return "UploadImageValidationError" }

// Error satisfies the builtin error interface
func (e UploadImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadImageValidationError{}

// Validate checks the field values on UploadVideo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UploadVideo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadVideo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UploadVideoMultiError, or
// nil if none found.
func (m *UploadVideo) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadVideo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.VideoContent.(type) {
	case *UploadVideo_Thumbnail:
		if v == nil {
			err := UploadVideoValidationError{
				field:  "VideoContent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetThumbnail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UploadVideoValidationError{
						field:  "Thumbnail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UploadVideoValidationError{
						field:  "Thumbnail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetThumbnail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UploadVideoValidationError{
					field:  "Thumbnail",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UploadVideo_MainContent:
		if v == nil {
			err := UploadVideoValidationError{
				field:  "VideoContent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMainContent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UploadVideoValidationError{
						field:  "MainContent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UploadVideoValidationError{
						field:  "MainContent",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMainContent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UploadVideoValidationError{
					field:  "MainContent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UploadVideoMultiError(errors)
	}

	return nil
}

// UploadVideoMultiError is an error wrapping multiple validation errors
// returned by UploadVideo.ValidateAll() if the designated constraints aren't met.
type UploadVideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadVideoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadVideoMultiError) AllErrors() []error { return m }

// UploadVideoValidationError is the validation error returned by
// UploadVideo.Validate if the designated constraints aren't met.
type UploadVideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadVideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadVideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadVideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadVideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadVideoValidationError) ErrorName() string { return "UploadVideoValidationError" }

// Error satisfies the builtin error interface
func (e UploadVideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadVideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadVideoValidationError{}

// Validate checks the field values on MixedUploadContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MixedUploadContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MixedUploadContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MixedUploadContentMultiError, or nil if none found.
func (m *MixedUploadContent) ValidateAll() error {
	return m.validate(true)
}

func (m *MixedUploadContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.MixedContent.(type) {
	case *MixedUploadContent_Image:
		if v == nil {
			err := MixedUploadContentValidationError{
				field:  "MixedContent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetImage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MixedUploadContentValidationError{
						field:  "Image",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MixedUploadContentValidationError{
						field:  "Image",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MixedUploadContentValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MixedUploadContent_Video:
		if v == nil {
			err := MixedUploadContentValidationError{
				field:  "MixedContent",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetVideo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MixedUploadContentValidationError{
						field:  "Video",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MixedUploadContentValidationError{
						field:  "Video",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MixedUploadContentValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return MixedUploadContentMultiError(errors)
	}

	return nil
}

// MixedUploadContentMultiError is an error wrapping multiple validation errors
// returned by MixedUploadContent.ValidateAll() if the designated constraints
// aren't met.
type MixedUploadContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MixedUploadContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MixedUploadContentMultiError) AllErrors() []error { return m }

// MixedUploadContentValidationError is the validation error returned by
// MixedUploadContent.Validate if the designated constraints aren't met.
type MixedUploadContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MixedUploadContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MixedUploadContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MixedUploadContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MixedUploadContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MixedUploadContentValidationError) ErrorName() string {
	return "MixedUploadContentValidationError"
}

// Error satisfies the builtin error interface
func (e MixedUploadContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMixedUploadContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MixedUploadContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MixedUploadContentValidationError{}
