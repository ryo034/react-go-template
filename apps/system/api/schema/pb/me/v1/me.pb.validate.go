// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: me/v1/me.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MultiFactor with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MultiFactor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MultiFactor with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MultiFactorMultiError, or
// nil if none found.
func (m *MultiFactor) ValidateAll() error {
	return m.validate(true)
}

func (m *MultiFactor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FactorId

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return MultiFactorMultiError(errors)
	}

	return nil
}

// MultiFactorMultiError is an error wrapping multiple validation errors
// returned by MultiFactor.ValidateAll() if the designated constraints aren't met.
type MultiFactorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MultiFactorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MultiFactorMultiError) AllErrors() []error { return m }

// MultiFactorValidationError is the validation error returned by
// MultiFactor.Validate if the designated constraints aren't met.
type MultiFactorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiFactorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiFactorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiFactorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiFactorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiFactorValidationError) ErrorName() string { return "MultiFactorValidationError" }

// Error satisfies the builtin error interface
func (e MultiFactorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiFactor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiFactorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiFactorValidationError{}

// Validate checks the field values on Info with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Info) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Info with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InfoMultiError, or nil if none found.
func (m *Info) ValidateAll() error {
	return m.validate(true)
}

func (m *Info) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfoValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfoValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InfoMultiError(errors)
	}

	return nil
}

// InfoMultiError is an error wrapping multiple validation errors returned by
// Info.ValidateAll() if the designated constraints aren't met.
type InfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoMultiError) AllErrors() []error { return m }

// InfoValidationError is the validation error returned by Info.Validate if the
// designated constraints aren't met.
type InfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoValidationError) ErrorName() string { return "InfoValidationError" }

// Error satisfies the builtin error interface
func (e InfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoValidationError{}

// Validate checks the field values on Me with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Me) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Me with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MeMultiError, or nil if none found.
func (m *Me) ValidateAll() error {
	return m.validate(true)
}

func (m *Me) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmailVerified

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MeValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MeValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.MultiFactor != nil {

		if all {
			switch v := interface{}(m.GetMultiFactor()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MeValidationError{
						field:  "MultiFactor",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MeValidationError{
						field:  "MultiFactor",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMultiFactor()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeValidationError{
					field:  "MultiFactor",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MeMultiError(errors)
	}

	return nil
}

// MeMultiError is an error wrapping multiple validation errors returned by
// Me.ValidateAll() if the designated constraints aren't met.
type MeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MeMultiError) AllErrors() []error { return m }

// MeValidationError is the validation error returned by Me.Validate if the
// designated constraints aren't met.
type MeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeValidationError) ErrorName() string { return "MeValidationError" }

// Error satisfies the builtin error interface
func (e MeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "Me",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on SignUpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpRequestMultiError, or
// nil if none found.
func (m *SignUpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirstName

	// no validation rules for LastName

	if len(errors) > 0 {
		return SignUpRequestMultiError(errors)
	}

	return nil
}

// SignUpRequestMultiError is an error wrapping multiple validation errors
// returned by SignUpRequest.ValidateAll() if the designated constraints
// aren't met.
type SignUpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpRequestMultiError) AllErrors() []error { return m }

// SignUpRequestValidationError is the validation error returned by
// SignUpRequest.Validate if the designated constraints aren't met.
type SignUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpRequestValidationError) ErrorName() string { return "SignUpRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpRequestValidationError{}

// Validate checks the field values on SignUpResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpResponseMultiError,
// or nil if none found.
func (m *SignUpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignUpResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignUpResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignUpResponseValidationError{
				field:  "Me",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SignUpResponseMultiError(errors)
	}

	return nil
}

// SignUpResponseMultiError is an error wrapping multiple validation errors
// returned by SignUpResponse.ValidateAll() if the designated constraints
// aren't met.
type SignUpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpResponseMultiError) AllErrors() []error { return m }

// SignUpResponseValidationError is the validation error returned by
// SignUpResponse.Validate if the designated constraints aren't met.
type SignUpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpResponseValidationError) ErrorName() string { return "SignUpResponseValidationError" }

// Error satisfies the builtin error interface
func (e SignUpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpResponseValidationError{}

// Validate checks the field values on RegisterCompleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterCompleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterCompleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterCompleteRequestMultiError, or nil if none found.
func (m *RegisterCompleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterCompleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterCompleteRequestMultiError(errors)
	}

	return nil
}

// RegisterCompleteRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterCompleteRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterCompleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterCompleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterCompleteRequestMultiError) AllErrors() []error { return m }

// RegisterCompleteRequestValidationError is the validation error returned by
// RegisterCompleteRequest.Validate if the designated constraints aren't met.
type RegisterCompleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterCompleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterCompleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterCompleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterCompleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterCompleteRequestValidationError) ErrorName() string {
	return "RegisterCompleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterCompleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterCompleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterCompleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterCompleteRequestValidationError{}

// Validate checks the field values on RegisterCompleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterCompleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterCompleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterCompleteResponseMultiError, or nil if none found.
func (m *RegisterCompleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterCompleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterCompleteResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterCompleteResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterCompleteResponseValidationError{
				field:  "Me",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterCompleteResponseMultiError(errors)
	}

	return nil
}

// RegisterCompleteResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterCompleteResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterCompleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterCompleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterCompleteResponseMultiError) AllErrors() []error { return m }

// RegisterCompleteResponseValidationError is the validation error returned by
// RegisterCompleteResponse.Validate if the designated constraints aren't met.
type RegisterCompleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterCompleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterCompleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterCompleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterCompleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterCompleteResponseValidationError) ErrorName() string {
	return "RegisterCompleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterCompleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterCompleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterCompleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterCompleteResponseValidationError{}

// Validate checks the field values on FindRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FindRequestMultiError, or
// nil if none found.
func (m *FindRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FindRequestMultiError(errors)
	}

	return nil
}

// FindRequestMultiError is an error wrapping multiple validation errors
// returned by FindRequest.ValidateAll() if the designated constraints aren't met.
type FindRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindRequestMultiError) AllErrors() []error { return m }

// FindRequestValidationError is the validation error returned by
// FindRequest.Validate if the designated constraints aren't met.
type FindRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindRequestValidationError) ErrorName() string { return "FindRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindRequestValidationError{}

// Validate checks the field values on FindResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FindResponseMultiError, or
// nil if none found.
func (m *FindResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindResponseValidationError{
				field:  "Me",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindResponseMultiError(errors)
	}

	return nil
}

// FindResponseMultiError is an error wrapping multiple validation errors
// returned by FindResponse.ValidateAll() if the designated constraints aren't met.
type FindResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindResponseMultiError) AllErrors() []error { return m }

// FindResponseValidationError is the validation error returned by
// FindResponse.Validate if the designated constraints aren't met.
type FindResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindResponseValidationError) ErrorName() string { return "FindResponseValidationError" }

// Error satisfies the builtin error interface
func (e FindResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindResponseValidationError{}

// Validate checks the field values on UpdateNameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNameRequestMultiError, or nil if none found.
func (m *UpdateNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirstName

	// no validation rules for LastName

	if len(errors) > 0 {
		return UpdateNameRequestMultiError(errors)
	}

	return nil
}

// UpdateNameRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateNameRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNameRequestMultiError) AllErrors() []error { return m }

// UpdateNameRequestValidationError is the validation error returned by
// UpdateNameRequest.Validate if the designated constraints aren't met.
type UpdateNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNameRequestValidationError) ErrorName() string {
	return "UpdateNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNameRequestValidationError{}

// Validate checks the field values on UpdateNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNameResponseMultiError, or nil if none found.
func (m *UpdateNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNameResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNameResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNameResponseValidationError{
				field:  "Me",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNameResponseMultiError(errors)
	}

	return nil
}

// UpdateNameResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateNameResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNameResponseMultiError) AllErrors() []error { return m }

// UpdateNameResponseValidationError is the validation error returned by
// UpdateNameResponse.Validate if the designated constraints aren't met.
type UpdateNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNameResponseValidationError) ErrorName() string {
	return "UpdateNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNameResponseValidationError{}

// Validate checks the field values on UpdateEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEmailRequestMultiError, or nil if none found.
func (m *UpdateEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return UpdateEmailRequestMultiError(errors)
	}

	return nil
}

// UpdateEmailRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmailRequestMultiError) AllErrors() []error { return m }

// UpdateEmailRequestValidationError is the validation error returned by
// UpdateEmailRequest.Validate if the designated constraints aren't met.
type UpdateEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmailRequestValidationError) ErrorName() string {
	return "UpdateEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmailRequestValidationError{}

// Validate checks the field values on UpdateEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEmailResponseMultiError, or nil if none found.
func (m *UpdateEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEmailResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEmailResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEmailResponseValidationError{
				field:  "Me",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEmailResponseMultiError(errors)
	}

	return nil
}

// UpdateEmailResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmailResponseMultiError) AllErrors() []error { return m }

// UpdateEmailResponseValidationError is the validation error returned by
// UpdateEmailResponse.Validate if the designated constraints aren't met.
type UpdateEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmailResponseValidationError) ErrorName() string {
	return "UpdateEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmailResponseValidationError{}

// Validate checks the field values on UpdatePhoneNumberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePhoneNumberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePhoneNumberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePhoneNumberRequestMultiError, or nil if none found.
func (m *UpdatePhoneNumberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePhoneNumberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return UpdatePhoneNumberRequestMultiError(errors)
	}

	return nil
}

// UpdatePhoneNumberRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePhoneNumberRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePhoneNumberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePhoneNumberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePhoneNumberRequestMultiError) AllErrors() []error { return m }

// UpdatePhoneNumberRequestValidationError is the validation error returned by
// UpdatePhoneNumberRequest.Validate if the designated constraints aren't met.
type UpdatePhoneNumberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePhoneNumberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePhoneNumberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePhoneNumberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePhoneNumberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePhoneNumberRequestValidationError) ErrorName() string {
	return "UpdatePhoneNumberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePhoneNumberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePhoneNumberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePhoneNumberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePhoneNumberRequestValidationError{}

// Validate checks the field values on UpdatePhoneNumberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePhoneNumberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePhoneNumberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePhoneNumberResponseMultiError, or nil if none found.
func (m *UpdatePhoneNumberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePhoneNumberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePhoneNumberResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePhoneNumberResponseValidationError{
					field:  "Me",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePhoneNumberResponseValidationError{
				field:  "Me",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePhoneNumberResponseMultiError(errors)
	}

	return nil
}

// UpdatePhoneNumberResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePhoneNumberResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdatePhoneNumberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePhoneNumberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePhoneNumberResponseMultiError) AllErrors() []error { return m }

// UpdatePhoneNumberResponseValidationError is the validation error returned by
// UpdatePhoneNumberResponse.Validate if the designated constraints aren't met.
type UpdatePhoneNumberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePhoneNumberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePhoneNumberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePhoneNumberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePhoneNumberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePhoneNumberResponseValidationError) ErrorName() string {
	return "UpdatePhoneNumberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePhoneNumberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePhoneNumberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePhoneNumberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePhoneNumberResponseValidationError{}
