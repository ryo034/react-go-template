// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Ref: #/components/schemas/health
type Health struct {
	Status HealthStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *Health) GetStatus() HealthStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *Health) SetStatus(val HealthStatus) {
	s.Status = val
}

func (*Health) healthGetRes() {}
func (*Health) hogeGetRes()   {}

type HealthStatus string

const (
	HealthStatusHealthy   HealthStatus = "healthy"
	HealthStatusUnhealthy HealthStatus = "unhealthy"
)

// AllValues returns all HealthStatus values.
func (HealthStatus) AllValues() []HealthStatus {
	return []HealthStatus{
		HealthStatusHealthy,
		HealthStatusUnhealthy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HealthStatus) MarshalText() ([]byte, error) {
	switch s {
	case HealthStatusHealthy:
		return []byte(s), nil
	case HealthStatusUnhealthy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HealthStatus) UnmarshalText(data []byte) error {
	switch HealthStatus(data) {
	case HealthStatusHealthy:
		*s = HealthStatusHealthy
		return nil
	case HealthStatusUnhealthy:
		*s = HealthStatusUnhealthy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type InternalServerError jx.Raw

func (*InternalServerError) healthGetRes() {}
func (*InternalServerError) hogeGetRes()   {}
