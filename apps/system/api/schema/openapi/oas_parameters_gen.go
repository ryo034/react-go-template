// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// APIV1AcceptInvitationParams is parameters of APIV1AcceptInvitation operation.
type APIV1AcceptInvitationParams struct {
	// Invitation token.
	InvitationId uuid.UUID
}

func unpackAPIV1AcceptInvitationParams(packed middleware.Parameters) (params APIV1AcceptInvitationParams) {
	{
		key := middleware.ParameterKey{
			Name: "invitationId",
			In:   "path",
		}
		params.InvitationId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAPIV1AcceptInvitationParams(args [1]string, argsEscaped bool, r *http.Request) (params APIV1AcceptInvitationParams, _ error) {
	// Decode path: invitationId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "invitationId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.InvitationId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "invitationId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// APIV1GetInvitationByTokenParams is parameters of APIV1GetInvitationByToken operation.
type APIV1GetInvitationByTokenParams struct {
	// Invitation token.
	Token uuid.UUID
}

func unpackAPIV1GetInvitationByTokenParams(packed middleware.Parameters) (params APIV1GetInvitationByTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "token",
			In:   "query",
		}
		params.Token = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAPIV1GetInvitationByTokenParams(args [0]string, argsEscaped bool, r *http.Request) (params APIV1GetInvitationByTokenParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: token.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "token",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.Token = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "token",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APIV1GetInvitationsParams is parameters of APIV1GetInvitations operation.
type APIV1GetInvitationsParams struct {
	// Invitation status.
	Status OptAPIV1GetInvitationsStatus
}

func unpackAPIV1GetInvitationsParams(packed middleware.Parameters) (params APIV1GetInvitationsParams) {
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptAPIV1GetInvitationsStatus)
		}
	}
	return params
}

func decodeAPIV1GetInvitationsParams(args [0]string, argsEscaped bool, r *http.Request) (params APIV1GetInvitationsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal APIV1GetInvitationsStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = APIV1GetInvitationsStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Status.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APIV1RemoveMemberParams is parameters of APIV1RemoveMember operation.
type APIV1RemoveMemberParams struct {
	// Member id.
	MemberId uuid.UUID
}

func unpackAPIV1RemoveMemberParams(packed middleware.Parameters) (params APIV1RemoveMemberParams) {
	{
		key := middleware.ParameterKey{
			Name: "memberId",
			In:   "path",
		}
		params.MemberId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAPIV1RemoveMemberParams(args [1]string, argsEscaped bool, r *http.Request) (params APIV1RemoveMemberParams, _ error) {
	// Decode path: memberId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "memberId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.MemberId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "memberId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// APIV1ResendInvitationParams is parameters of APIV1ResendInvitation operation.
type APIV1ResendInvitationParams struct {
	// Invitation id.
	InvitationId uuid.UUID
}

func unpackAPIV1ResendInvitationParams(packed middleware.Parameters) (params APIV1ResendInvitationParams) {
	{
		key := middleware.ParameterKey{
			Name: "invitationId",
			In:   "path",
		}
		params.InvitationId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAPIV1ResendInvitationParams(args [1]string, argsEscaped bool, r *http.Request) (params APIV1ResendInvitationParams, _ error) {
	// Decode path: invitationId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "invitationId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.InvitationId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "invitationId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// APIV1RevokeInvitationParams is parameters of APIV1RevokeInvitation operation.
type APIV1RevokeInvitationParams struct {
	// Invitation id.
	InvitationId uuid.UUID
}

func unpackAPIV1RevokeInvitationParams(packed middleware.Parameters) (params APIV1RevokeInvitationParams) {
	{
		key := middleware.ParameterKey{
			Name: "invitationId",
			In:   "path",
		}
		params.InvitationId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAPIV1RevokeInvitationParams(args [1]string, argsEscaped bool, r *http.Request) (params APIV1RevokeInvitationParams, _ error) {
	// Decode path: invitationId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "invitationId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.InvitationId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "invitationId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// APIV1UpdateMemberRoleParams is parameters of APIV1UpdateMemberRole operation.
type APIV1UpdateMemberRoleParams struct {
	// Member id.
	MemberId uuid.UUID
}

func unpackAPIV1UpdateMemberRoleParams(packed middleware.Parameters) (params APIV1UpdateMemberRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "memberId",
			In:   "path",
		}
		params.MemberId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAPIV1UpdateMemberRoleParams(args [1]string, argsEscaped bool, r *http.Request) (params APIV1UpdateMemberRoleParams, _ error) {
	// Decode path: memberId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "memberId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.MemberId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "memberId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// APIV1UpdateWorkspaceParams is parameters of APIV1UpdateWorkspace operation.
type APIV1UpdateWorkspaceParams struct {
	// Workspace id.
	WorkspaceId uuid.UUID
}

func unpackAPIV1UpdateWorkspaceParams(packed middleware.Parameters) (params APIV1UpdateWorkspaceParams) {
	{
		key := middleware.ParameterKey{
			Name: "workspaceId",
			In:   "path",
		}
		params.WorkspaceId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAPIV1UpdateWorkspaceParams(args [1]string, argsEscaped bool, r *http.Request) (params APIV1UpdateWorkspaceParams, _ error) {
	// Decode path: workspaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "workspaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.WorkspaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "workspaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
