// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/v1/"
			origElem := elem
			if l := len("/api/v1/"); len(elem) >= l && elem[0:l] == "/api/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "invitations"
					origElem := elem
					if l := len("invitations"); len(elem) >= l && elem[0:l] == "invitations" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleAPIV1GetInvitationByTokenRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/process/"
						origElem := elem
						if l := len("/process/"); len(elem) >= l && elem[0:l] == "/process/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "email"
							origElem := elem
							if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAPIV1ProcessInvitationEmailRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						case 'o': // Prefix: "oauth"
							origElem := elem
							if l := len("oauth"); len(elem) >= l && elem[0:l] == "oauth" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAPIV1ProcessInvitationOAuthRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "o"
					origElem := elem
					if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "auth"
						origElem := elem
						if l := len("auth"); len(elem) >= l && elem[0:l] == "auth" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAPIV1AuthByOAuthRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 't': // Prefix: "tp"
						origElem := elem
						if l := len("tp"); len(elem) >= l && elem[0:l] == "tp" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleAPIV1AuthByOtpRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/verify"
							origElem := elem
							if l := len("/verify"); len(elem) >= l && elem[0:l] == "/verify" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAPIV1VerifyOTPRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "invitations"
				origElem := elem
				if l := len("invitations"); len(elem) >= l && elem[0:l] == "invitations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleAPIV1GetInvitationsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'm': // Prefix: "me"
				origElem := elem
				if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleAPIV1GetMeRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "member/profile"
						origElem := elem
						if l := len("member/profile"); len(elem) >= l && elem[0:l] == "member/profile" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "PUT":
								s.handleAPIV1UpdateMeMemberProfileRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "PUT")
							}

							return
						}

						elem = origElem
					case 'p': // Prefix: "profile"
						origElem := elem
						if l := len("profile"); len(elem) >= l && elem[0:l] == "profile" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "PUT":
								s.handleAPIV1UpdateProfileRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/photo"
							origElem := elem
							if l := len("/photo"); len(elem) >= l && elem[0:l] == "/photo" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleAPIV1RemoveProfilePhotoRequest([0]string{}, elemIsEscaped, w, r)
								case "PUT":
									s.handleAPIV1UpdateProfilePhotoRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,PUT")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'w': // Prefix: "workspace/leave"
						origElem := elem
						if l := len("workspace/leave"); len(elem) >= l && elem[0:l] == "workspace/leave" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAPIV1LeaveWorkspaceRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'm': // Prefix: "mbers"
					origElem := elem
					if l := len("mbers"); len(elem) >= l && elem[0:l] == "mbers" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleAPIV1GetMembersRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "invitations/"
							origElem := elem
							if l := len("invitations/"); len(elem) >= l && elem[0:l] == "invitations/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'b': // Prefix: "bulk"
								origElem := elem
								if l := len("bulk"); len(elem) >= l && elem[0:l] == "bulk" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleAPIV1InviteMultipleUsersRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}
							// Param: "invitationId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "accept"
									origElem := elem
									if l := len("accept"); len(elem) >= l && elem[0:l] == "accept" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleAPIV1AcceptInvitationRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

									elem = origElem
								case 'r': // Prefix: "re"
									origElem := elem
									if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 's': // Prefix: "send"
										origElem := elem
										if l := len("send"); len(elem) >= l && elem[0:l] == "send" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleAPIV1ResendInvitationRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									case 'v': // Prefix: "voke"
										origElem := elem
										if l := len("voke"); len(elem) >= l && elem[0:l] == "voke" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleAPIV1RevokeInvitationRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}
						// Param: "memberId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleAPIV1RemoveMemberRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/role"
							origElem := elem
							if l := len("/role"); len(elem) >= l && elem[0:l] == "/role" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleAPIV1UpdateMemberRoleRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'p': // Prefix: "ping"
				origElem := elem
				if l := len("ping"); len(elem) >= l && elem[0:l] == "ping" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handlePingRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'w': // Prefix: "workspaces"
				origElem := elem
				if l := len("workspaces"); len(elem) >= l && elem[0:l] == "workspaces" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleAPIV1GetWorkspacesRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleAPIV1CreateWorkspaceRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "workspaceId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "PUT":
							s.handleAPIV1UpdateWorkspaceRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "PUT")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/v1/"
			origElem := elem
			if l := len("/api/v1/"); len(elem) >= l && elem[0:l] == "/api/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "auth/"
				origElem := elem
				if l := len("auth/"); len(elem) >= l && elem[0:l] == "auth/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "invitations"
					origElem := elem
					if l := len("invitations"); len(elem) >= l && elem[0:l] == "invitations" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "APIV1GetInvitationByToken"
							r.summary = "Get Invitation by token"
							r.operationID = "APIV1GetInvitationByToken"
							r.pathPattern = "/api/v1/auth/invitations"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/process/"
						origElem := elem
						if l := len("/process/"); len(elem) >= l && elem[0:l] == "/process/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "email"
							origElem := elem
							if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: APIV1ProcessInvitationEmail
									r.name = "APIV1ProcessInvitationEmail"
									r.summary = "Process an invitation by verifying token and email"
									r.operationID = "APIV1ProcessInvitationEmail"
									r.pathPattern = "/api/v1/auth/invitations/process/email"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'o': // Prefix: "oauth"
							origElem := elem
							if l := len("oauth"); len(elem) >= l && elem[0:l] == "oauth" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: APIV1ProcessInvitationOAuth
									r.name = "APIV1ProcessInvitationOAuth"
									r.summary = "Process an invitation by verifying token and OAuth, and register or add user to workspace."
									r.operationID = "APIV1ProcessInvitationOAuth"
									r.pathPattern = "/api/v1/auth/invitations/process/oauth"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "o"
					origElem := elem
					if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "auth"
						origElem := elem
						if l := len("auth"); len(elem) >= l && elem[0:l] == "auth" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: APIV1AuthByOAuth
								r.name = "APIV1AuthByOAuth"
								r.summary = "Auth by OAuth"
								r.operationID = "APIV1AuthByOAuth"
								r.pathPattern = "/api/v1/auth/oauth"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 't': // Prefix: "tp"
						origElem := elem
						if l := len("tp"); len(elem) >= l && elem[0:l] == "tp" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "APIV1AuthByOtp"
								r.summary = "Send OTP"
								r.operationID = "APIV1AuthByOtp"
								r.pathPattern = "/api/v1/auth/otp"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/verify"
							origElem := elem
							if l := len("/verify"); len(elem) >= l && elem[0:l] == "/verify" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: APIV1VerifyOTP
									r.name = "APIV1VerifyOTP"
									r.summary = "Verify OTP"
									r.operationID = "APIV1VerifyOTP"
									r.pathPattern = "/api/v1/auth/otp/verify"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "invitations"
				origElem := elem
				if l := len("invitations"); len(elem) >= l && elem[0:l] == "invitations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: APIV1GetInvitations
						r.name = "APIV1GetInvitations"
						r.summary = "Get pending invitations"
						r.operationID = "APIV1GetInvitations"
						r.pathPattern = "/api/v1/invitations"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'm': // Prefix: "me"
				origElem := elem
				if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "APIV1GetMe"
						r.summary = "Get Admin User"
						r.operationID = "APIV1GetMe"
						r.pathPattern = "/api/v1/me"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'm': // Prefix: "member/profile"
						origElem := elem
						if l := len("member/profile"); len(elem) >= l && elem[0:l] == "member/profile" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "PUT":
								// Leaf: APIV1UpdateMeMemberProfile
								r.name = "APIV1UpdateMeMemberProfile"
								r.summary = "Update Me Member Profile"
								r.operationID = "APIV1UpdateMeMemberProfile"
								r.pathPattern = "/api/v1/me/member/profile"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'p': // Prefix: "profile"
						origElem := elem
						if l := len("profile"); len(elem) >= l && elem[0:l] == "profile" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "PUT":
								r.name = "APIV1UpdateProfile"
								r.summary = "Update Profile"
								r.operationID = "APIV1UpdateProfile"
								r.pathPattern = "/api/v1/me/profile"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/photo"
							origElem := elem
							if l := len("/photo"); len(elem) >= l && elem[0:l] == "/photo" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									// Leaf: APIV1RemoveProfilePhoto
									r.name = "APIV1RemoveProfilePhoto"
									r.summary = "Delete Profile Photo"
									r.operationID = "APIV1RemoveProfilePhoto"
									r.pathPattern = "/api/v1/me/profile/photo"
									r.args = args
									r.count = 0
									return r, true
								case "PUT":
									// Leaf: APIV1UpdateProfilePhoto
									r.name = "APIV1UpdateProfilePhoto"
									r.summary = "Update Profile Photo"
									r.operationID = "APIV1UpdateProfilePhoto"
									r.pathPattern = "/api/v1/me/profile/photo"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'w': // Prefix: "workspace/leave"
						origElem := elem
						if l := len("workspace/leave"); len(elem) >= l && elem[0:l] == "workspace/leave" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: APIV1LeaveWorkspace
								r.name = "APIV1LeaveWorkspace"
								r.summary = "Leave Workspace"
								r.operationID = "APIV1LeaveWorkspace"
								r.pathPattern = "/api/v1/me/workspace/leave"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'm': // Prefix: "mbers"
					origElem := elem
					if l := len("mbers"); len(elem) >= l && elem[0:l] == "mbers" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "APIV1GetMembers"
							r.summary = "Get Members"
							r.operationID = "APIV1GetMembers"
							r.pathPattern = "/api/v1/members"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "invitations/"
							origElem := elem
							if l := len("invitations/"); len(elem) >= l && elem[0:l] == "invitations/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'b': // Prefix: "bulk"
								origElem := elem
								if l := len("bulk"); len(elem) >= l && elem[0:l] == "bulk" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: APIV1InviteMultipleUsers
										r.name = "APIV1InviteMultipleUsers"
										r.summary = "Invite multiple users to the workspace by email"
										r.operationID = "APIV1InviteMultipleUsers"
										r.pathPattern = "/api/v1/members/invitations/bulk"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}
							// Param: "invitationId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								origElem := elem
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "accept"
									origElem := elem
									if l := len("accept"); len(elem) >= l && elem[0:l] == "accept" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: APIV1AcceptInvitation
											r.name = "APIV1AcceptInvitation"
											r.summary = "Accept an invitation to join a workspace"
											r.operationID = "APIV1AcceptInvitation"
											r.pathPattern = "/api/v1/members/invitations/{invitationId}/accept"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'r': // Prefix: "re"
									origElem := elem
									if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 's': // Prefix: "send"
										origElem := elem
										if l := len("send"); len(elem) >= l && elem[0:l] == "send" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: APIV1ResendInvitation
												r.name = "APIV1ResendInvitation"
												r.summary = "Resend invitation"
												r.operationID = "APIV1ResendInvitation"
												r.pathPattern = "/api/v1/members/invitations/{invitationId}/resend"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									case 'v': // Prefix: "voke"
										origElem := elem
										if l := len("voke"); len(elem) >= l && elem[0:l] == "voke" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: APIV1RevokeInvitation
												r.name = "APIV1RevokeInvitation"
												r.summary = "Revoke invitation"
												r.operationID = "APIV1RevokeInvitation"
												r.pathPattern = "/api/v1/members/invitations/{invitationId}/revoke"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

										elem = origElem
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}
						// Param: "memberId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "APIV1RemoveMember"
								r.summary = "Remove Member"
								r.operationID = "APIV1RemoveMember"
								r.pathPattern = "/api/v1/members/{memberId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/role"
							origElem := elem
							if l := len("/role"); len(elem) >= l && elem[0:l] == "/role" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "PUT":
									// Leaf: APIV1UpdateMemberRole
									r.name = "APIV1UpdateMemberRole"
									r.summary = "Update Member Role"
									r.operationID = "APIV1UpdateMemberRole"
									r.pathPattern = "/api/v1/members/{memberId}/role"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'p': // Prefix: "ping"
				origElem := elem
				if l := len("ping"); len(elem) >= l && elem[0:l] == "ping" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: Ping
						r.name = "Ping"
						r.summary = "Checks if the server is running"
						r.operationID = "Ping"
						r.pathPattern = "/api/v1/ping"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'w': // Prefix: "workspaces"
				origElem := elem
				if l := len("workspaces"); len(elem) >= l && elem[0:l] == "workspaces" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "APIV1GetWorkspaces"
						r.summary = "Get Joined Workspaces"
						r.operationID = "APIV1GetWorkspaces"
						r.pathPattern = "/api/v1/workspaces"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "APIV1CreateWorkspace"
						r.summary = "Create Workspace"
						r.operationID = "APIV1CreateWorkspace"
						r.pathPattern = "/api/v1/workspaces"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "workspaceId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "PUT":
							// Leaf: APIV1UpdateWorkspace
							r.name = "APIV1UpdateWorkspace"
							r.summary = "Update Workspace"
							r.operationID = "APIV1UpdateWorkspace"
							r.pathPattern = "/api/v1/workspaces/{workspaceId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
