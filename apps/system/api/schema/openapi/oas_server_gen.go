// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// APIV1AuthOAuthPost implements POST /api/v1/auth/oauth operation.
	//
	// Auth by OAuth.
	//
	// POST /api/v1/auth/oauth
	APIV1AuthOAuthPost(ctx context.Context) (APIV1AuthOAuthPostRes, error)
	// APIV1AuthOtpPost implements POST /api/v1/auth/otp operation.
	//
	// One Time Password (OTP) to user.
	//
	// POST /api/v1/auth/otp
	APIV1AuthOtpPost(ctx context.Context, req *APIV1AuthOtpPostReq) (APIV1AuthOtpPostRes, error)
	// APIV1AuthOtpVerifyPost implements POST /api/v1/auth/otp/verify operation.
	//
	// Verify OTP sent by user.
	//
	// POST /api/v1/auth/otp/verify
	APIV1AuthOtpVerifyPost(ctx context.Context, req *APIV1AuthOtpVerifyPostReq) (APIV1AuthOtpVerifyPostRes, error)
	// APIV1InvitationsGet implements GET /api/v1/invitations operation.
	//
	// Returns the pending invitations (not used yet).
	//
	// GET /api/v1/invitations
	APIV1InvitationsGet(ctx context.Context, params APIV1InvitationsGetParams) (APIV1InvitationsGetRes, error)
	// APIV1MeGet implements GET /api/v1/me operation.
	//
	// Returns the admin user.
	//
	// GET /api/v1/me
	APIV1MeGet(ctx context.Context) (APIV1MeGetRes, error)
	// APIV1MeMemberProfilePut implements PUT /api/v1/me/member/profile operation.
	//
	// Updates Me the member profile.
	//
	// PUT /api/v1/me/member/profile
	APIV1MeMemberProfilePut(ctx context.Context, req *APIV1MeMemberProfilePutReq) (APIV1MeMemberProfilePutRes, error)
	// APIV1MeProfilePhotoDelete implements DELETE /api/v1/me/profile/photo operation.
	//
	// Deletes the user profile photo.
	//
	// DELETE /api/v1/me/profile/photo
	APIV1MeProfilePhotoDelete(ctx context.Context) (APIV1MeProfilePhotoDeleteRes, error)
	// APIV1MeProfilePhotoPut implements PUT /api/v1/me/profile/photo operation.
	//
	// Updates the user profile photo.
	//
	// PUT /api/v1/me/profile/photo
	APIV1MeProfilePhotoPut(ctx context.Context, req *APIV1MeProfilePhotoPutReq) (APIV1MeProfilePhotoPutRes, error)
	// APIV1MeProfilePut implements PUT /api/v1/me/profile operation.
	//
	// Updates the user profile.
	//
	// PUT /api/v1/me/profile
	APIV1MeProfilePut(ctx context.Context, req *APIV1MeProfilePutReq) (APIV1MeProfilePutRes, error)
	// APIV1MembersGet implements GET /api/v1/members operation.
	//
	// Returns the members of the workspace.
	//
	// GET /api/v1/members
	APIV1MembersGet(ctx context.Context) (APIV1MembersGetRes, error)
	// APIV1MembersMemberIdRolePut implements PUT /api/v1/members/{memberId}/role operation.
	//
	// Updates the role of a member.
	//
	// PUT /api/v1/members/{memberId}/role
	APIV1MembersMemberIdRolePut(ctx context.Context, req *APIV1MembersMemberIdRolePutReq, params APIV1MembersMemberIdRolePutParams) (APIV1MembersMemberIdRolePutRes, error)
	// APIV1PingGet implements GET /api/v1/ping operation.
	//
	// Checks if the server is running.
	//
	// GET /api/v1/ping
	APIV1PingGet(ctx context.Context) (APIV1PingGetRes, error)
	// APIV1WorkspacesGet implements GET /api/v1/workspaces operation.
	//
	// Returns the workspaces the user is a member of.
	//
	// GET /api/v1/workspaces
	APIV1WorkspacesGet(ctx context.Context) (APIV1WorkspacesGetRes, error)
	// APIV1WorkspacesPost implements POST /api/v1/workspaces operation.
	//
	// Creates a new workspace.
	//
	// POST /api/v1/workspaces
	APIV1WorkspacesPost(ctx context.Context, req *APIV1WorkspacesPostReq) (APIV1WorkspacesPostRes, error)
	// APIV1WorkspacesWorkspaceIdPut implements PUT /api/v1/workspaces/{workspaceId} operation.
	//
	// Updates the workspace.
	//
	// PUT /api/v1/workspaces/{workspaceId}
	APIV1WorkspacesWorkspaceIdPut(ctx context.Context, req *APIV1WorkspacesWorkspaceIdPutReq, params APIV1WorkspacesWorkspaceIdPutParams) (APIV1WorkspacesWorkspaceIdPutRes, error)
	// AcceptInvitation implements acceptInvitation operation.
	//
	// Accept an invitation to join a workspace.
	//
	// POST /api/v1/members/invitations/{invitationId}/accept
	AcceptInvitation(ctx context.Context, params AcceptInvitationParams) (AcceptInvitationRes, error)
	// GetInvitationByToken implements getInvitationByToken operation.
	//
	// Get Invitation by token.
	//
	// GET /api/v1/auth/invitations
	GetInvitationByToken(ctx context.Context, params GetInvitationByTokenParams) (GetInvitationByTokenRes, error)
	// InviteMultipleUsersToWorkspace implements inviteMultipleUsersToWorkspace operation.
	//
	// Invite multiple users to the workspace by email.
	//
	// POST /api/v1/members/invitations/bulk
	InviteMultipleUsersToWorkspace(ctx context.Context, req *InviteMultipleUsersToWorkspaceReq) (InviteMultipleUsersToWorkspaceRes, error)
	// ProcessInvitationEmail implements processInvitationEmail operation.
	//
	// Process an invitation by verifying token and email.
	//
	// POST /api/v1/auth/invitations/process/email
	ProcessInvitationEmail(ctx context.Context, req *ProcessInvitationEmailReq) (ProcessInvitationEmailRes, error)
	// ProcessInvitationOAuth implements processInvitationOAuth operation.
	//
	// Process an invitation by verifying token and OAuth, and register or add user to workspace.
	//
	// POST /api/v1/auth/invitations/process/oauth
	ProcessInvitationOAuth(ctx context.Context, req *ProcessInvitationOAuthReq) (ProcessInvitationOAuthRes, error)
	// ResendInvitation implements resendInvitation operation.
	//
	// Resend invitation.
	//
	// POST /api/v1/members/invitations/{invitationId}/resend
	ResendInvitation(ctx context.Context, params ResendInvitationParams) (ResendInvitationRes, error)
	// RevokeInvitation implements revokeInvitation operation.
	//
	// Revoke invitation.
	//
	// POST /api/v1/members/invitations/{invitationId}/revoke
	RevokeInvitation(ctx context.Context, params RevokeInvitationParams) (RevokeInvitationRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
