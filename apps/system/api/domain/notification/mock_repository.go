// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mock_repository.go -package=notification
//

// Package notification is a generated GoMock package.
package notification

import (
	context "context"
	reflect "reflect"

	account "github.com/ryo034/react-go-template/apps/system/api/domain/shared/account"
	workspace "github.com/ryo034/react-go-template/apps/system/api/domain/workspace"
	invitation "github.com/ryo034/react-go-template/apps/system/api/domain/workspace/invitation"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// NotifyMembersInvited mocks base method.
func (m *MockRepository) NotifyMembersInvited(ctx context.Context, inviter workspace.Inviter, is invitation.Invitations) (invitation.Invitations, invitation.Invitations) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyMembersInvited", ctx, inviter, is)
	ret0, _ := ret[0].(invitation.Invitations)
	ret1, _ := ret[1].(invitation.Invitations)
	return ret0, ret1
}

// NotifyMembersInvited indicates an expected call of NotifyMembersInvited.
func (mr *MockRepositoryMockRecorder) NotifyMembersInvited(ctx, inviter, is any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyMembersInvited", reflect.TypeOf((*MockRepository)(nil).NotifyMembersInvited), ctx, inviter, is)
}

// NotifyOtpByEmail mocks base method.
func (m *MockRepository) NotifyOtpByEmail(ctx context.Context, email account.Email, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyOtpByEmail", ctx, email, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyOtpByEmail indicates an expected call of NotifyOtpByEmail.
func (mr *MockRepositoryMockRecorder) NotifyOtpByEmail(ctx, email, otp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyOtpByEmail", reflect.TypeOf((*MockRepository)(nil).NotifyOtpByEmail), ctx, email, otp)
}
