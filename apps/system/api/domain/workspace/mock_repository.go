// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mock_repository.go -package=workspace
//

// Package workspace is a generated GoMock package.
package workspace

import (
	context "context"
	reflect "reflect"

	account "github.com/ryo034/react-go-template/apps/system/api/domain/shared/account"
	invitation "github.com/ryo034/react-go-template/apps/system/api/domain/workspace/invitation"
	member "github.com/ryo034/react-go-template/apps/system/api/domain/workspace/member"
	bun "github.com/uptrace/bun"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m_2 *MockRepository) AddMember(ctx context.Context, exec bun.IDB, w *Workspace, m *member.Member) (*member.Member, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "AddMember", ctx, exec, w, m)
	ret0, _ := ret[0].(*member.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMember indicates an expected call of AddMember.
func (mr *MockRepositoryMockRecorder) AddMember(ctx, exec, w, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockRepository)(nil).AddMember), ctx, exec, w, m)
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, exec bun.IDB, w *Workspace) (*Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, exec, w)
	ret0, _ := ret[0].(*Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, exec, w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, exec, w)
}

// FindActiveInvitation mocks base method.
func (m *MockRepository) FindActiveInvitation(ctx context.Context, exec bun.IDB, id invitation.ID) (*invitation.Invitation, *Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveInvitation", ctx, exec, id)
	ret0, _ := ret[0].(*invitation.Invitation)
	ret1, _ := ret[1].(*Workspace)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindActiveInvitation indicates an expected call of FindActiveInvitation.
func (mr *MockRepositoryMockRecorder) FindActiveInvitation(ctx, exec, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveInvitation", reflect.TypeOf((*MockRepository)(nil).FindActiveInvitation), ctx, exec, id)
}

// FindAll mocks base method.
func (m *MockRepository) FindAll(ctx context.Context, exec bun.IDB, aID account.ID) (Workspaces, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, exec, aID)
	ret0, _ := ret[0].(Workspaces)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRepositoryMockRecorder) FindAll(ctx, exec, aID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRepository)(nil).FindAll), ctx, exec, aID)
}

// FindAllInvitations mocks base method.
func (m *MockRepository) FindAllInvitations(ctx context.Context, exec bun.IDB, wID ID) (invitation.Invitations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllInvitations", ctx, exec, wID)
	ret0, _ := ret[0].(invitation.Invitations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllInvitations indicates an expected call of FindAllInvitations.
func (mr *MockRepositoryMockRecorder) FindAllInvitations(ctx, exec, wID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllInvitations", reflect.TypeOf((*MockRepository)(nil).FindAllInvitations), ctx, exec, wID)
}

// FindAllMembers mocks base method.
func (m *MockRepository) FindAllMembers(ctx context.Context, exec bun.IDB, wID ID) (member.Members, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMembers", ctx, exec, wID)
	ret0, _ := ret[0].(member.Members)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMembers indicates an expected call of FindAllMembers.
func (mr *MockRepositoryMockRecorder) FindAllMembers(ctx, exec, wID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMembers", reflect.TypeOf((*MockRepository)(nil).FindAllMembers), ctx, exec, wID)
}

// FindInviterFromToken mocks base method.
func (m *MockRepository) FindInviterFromToken(ctx context.Context, exec bun.IDB, token invitation.Token) (Inviter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInviterFromToken", ctx, exec, token)
	ret0, _ := ret[0].(Inviter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInviterFromToken indicates an expected call of FindInviterFromToken.
func (mr *MockRepositoryMockRecorder) FindInviterFromToken(ctx, exec, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInviterFromToken", reflect.TypeOf((*MockRepository)(nil).FindInviterFromToken), ctx, exec, token)
}

// FindMember mocks base method.
func (m *MockRepository) FindMember(ctx context.Context, exec bun.IDB, aID account.ID, wID ID) (*member.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMember", ctx, exec, aID, wID)
	ret0, _ := ret[0].(*member.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMember indicates an expected call of FindMember.
func (mr *MockRepositoryMockRecorder) FindMember(ctx, exec, aID, wID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMember", reflect.TypeOf((*MockRepository)(nil).FindMember), ctx, exec, aID, wID)
}

// InviteMembers mocks base method.
func (m *MockRepository) InviteMembers(ctx context.Context, exec bun.IDB, inviter Inviter, is invitation.Invitations) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteMembers", ctx, exec, inviter, is)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteMembers indicates an expected call of InviteMembers.
func (mr *MockRepositoryMockRecorder) InviteMembers(ctx, exec, inviter, is any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteMembers", reflect.TypeOf((*MockRepository)(nil).InviteMembers), ctx, exec, inviter, is)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, exec bun.IDB, w *Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, exec, w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, exec, w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, exec, w)
}

// UpdateMemberRole mocks base method.
func (m_2 *MockRepository) UpdateMemberRole(ctx context.Context, exec bun.IDB, assignor, m *member.Member) (*member.Member, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateMemberRole", ctx, exec, assignor, m)
	ret0, _ := ret[0].(*member.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMemberRole indicates an expected call of UpdateMemberRole.
func (mr *MockRepositoryMockRecorder) UpdateMemberRole(ctx, exec, assignor, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberRole", reflect.TypeOf((*MockRepository)(nil).UpdateMemberRole), ctx, exec, assignor, m)
}
