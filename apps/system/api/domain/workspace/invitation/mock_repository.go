// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mock_repository.go -package=invitation
//

// Package invitation is a generated GoMock package.
package invitation

import (
	context "context"
	reflect "reflect"

	account "github.com/ryo034/react-go-template/apps/system/api/domain/shared/account"
	bun "github.com/uptrace/bun"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockRepository) Accept(ctx context.Context, exec bun.IDB, id ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept", ctx, exec, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Accept indicates an expected call of Accept.
func (mr *MockRepositoryMockRecorder) Accept(ctx, exec, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockRepository)(nil).Accept), ctx, exec, id)
}

// Find mocks base method.
func (m *MockRepository) Find(ctx context.Context, exec bun.IDB, iID ID) (*Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, exec, iID)
	ret0, _ := ret[0].(*Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRepositoryMockRecorder) Find(ctx, exec, iID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepository)(nil).Find), ctx, exec, iID)
}

// FindActiveAllByEmail mocks base method.
func (m *MockRepository) FindActiveAllByEmail(ctx context.Context, exec bun.IDB, email account.Email) (Invitations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveAllByEmail", ctx, exec, email)
	ret0, _ := ret[0].(Invitations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActiveAllByEmail indicates an expected call of FindActiveAllByEmail.
func (mr *MockRepositoryMockRecorder) FindActiveAllByEmail(ctx, exec, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveAllByEmail", reflect.TypeOf((*MockRepository)(nil).FindActiveAllByEmail), ctx, exec, email)
}

// FindActiveByEmail mocks base method.
func (m *MockRepository) FindActiveByEmail(ctx context.Context, exec bun.IDB, email account.Email) (*Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveByEmail", ctx, exec, email)
	ret0, _ := ret[0].(*Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActiveByEmail indicates an expected call of FindActiveByEmail.
func (mr *MockRepositoryMockRecorder) FindActiveByEmail(ctx, exec, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveByEmail", reflect.TypeOf((*MockRepository)(nil).FindActiveByEmail), ctx, exec, email)
}

// FindActiveByToken mocks base method.
func (m *MockRepository) FindActiveByToken(ctx context.Context, exec bun.IDB, token Token) (*Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveByToken", ctx, exec, token)
	ret0, _ := ret[0].(*Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActiveByToken indicates an expected call of FindActiveByToken.
func (mr *MockRepositoryMockRecorder) FindActiveByToken(ctx, exec, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveByToken", reflect.TypeOf((*MockRepository)(nil).FindActiveByToken), ctx, exec, token)
}

// FindByToken mocks base method.
func (m *MockRepository) FindByToken(ctx context.Context, exec bun.IDB, token Token) (*Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByToken", ctx, exec, token)
	ret0, _ := ret[0].(*Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByToken indicates an expected call of FindByToken.
func (mr *MockRepositoryMockRecorder) FindByToken(ctx, exec, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByToken", reflect.TypeOf((*MockRepository)(nil).FindByToken), ctx, exec, token)
}

// Resend mocks base method.
func (m *MockRepository) Resend(ctx context.Context, exec bun.IDB, id ID) (*Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resend", ctx, exec, id)
	ret0, _ := ret[0].(*Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resend indicates an expected call of Resend.
func (mr *MockRepositoryMockRecorder) Resend(ctx, exec, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resend", reflect.TypeOf((*MockRepository)(nil).Resend), ctx, exec, id)
}

// Revoke mocks base method.
func (m *MockRepository) Revoke(ctx context.Context, exec bun.IDB, id ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ctx, exec, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockRepositoryMockRecorder) Revoke(ctx, exec, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockRepository)(nil).Revoke), ctx, exec, id)
}

// VerifyByToken mocks base method.
func (m *MockRepository) VerifyByToken(ctx context.Context, exec bun.IDB, token Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyByToken", ctx, exec, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyByToken indicates an expected call of VerifyByToken.
func (mr *MockRepositoryMockRecorder) VerifyByToken(ctx, exec, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyByToken", reflect.TypeOf((*MockRepository)(nil).VerifyByToken), ctx, exec, token)
}
